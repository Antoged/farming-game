from flask import Flask, render_template, request, jsonify, session
from flask_cors import CORS
import json
import os
from game_logic import GameLogic
try:
    from config_local import SEEDS, WEATHER_EFFECTS
except ImportError:
    from config import SEEDS, WEATHER_EFFECTS

app = Flask(__name__)
app.secret_key = os.urandom(24)
CORS(app)

game = GameLogic()

def convert_user_id(user_id):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç user_id –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if isinstance(user_id, str) and user_id.startswith('browser_'):
        import hashlib
        return int(hashlib.md5(user_id.encode()).hexdigest()[:8], 16)
    return int(user_id)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/api/init', methods=['POST'])
def init_user():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = request.get_json()
        user_id = data.get('user_id')
        username = data.get('username', '–ò–≥—Ä–æ–∫')
        
        if not user_id:
            return jsonify({'error': 'user_id required'}), 400
        
        numeric_id = convert_user_id(user_id)
        player = game.db.get_or_create_player(numeric_id, username)
        return jsonify({'success': True, 'player': player})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/farm', methods=['GET'])
def get_farm():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ñ–µ—Ä–º—ã"""
    try:
        user_id = request.args.get('user_id')
        if not user_id:
            return jsonify({'error': 'user_id required'}), 400
        
        farm_status = game.get_farm_status(convert_user_id(user_id))
        weather_info = game.get_current_weather_info()
        
        return jsonify({
            'farm': farm_status,
            'weather': weather_info
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/plant', methods=['POST'])
def plant_seed():
    """–ü–æ—Å–∞–¥–∏—Ç—å —Å–µ–º–µ—á–∫–æ"""
    try:
        data = request.get_json()
        user_id = data.get('user_id')
        plot_id = data.get('plot_id')
        seed_type = data.get('seed_type')
        
        if not all([user_id, plot_id, seed_type]):
            return jsonify({'error': 'Missing required parameters'}), 400
        
        success, message = game.plant_seed(convert_user_id(user_id), int(plot_id), seed_type)
        return jsonify({'success': success, 'message': message})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/harvest', methods=['POST'])
def harvest_plot():
    """–°–æ–±—Ä–∞—Ç—å —É—Ä–æ–∂–∞–π"""
    try:
        data = request.get_json()
        user_id = data.get('user_id')
        plot_id = data.get('plot_id')
        
        if not all([user_id, plot_id]):
            return jsonify({'error': 'Missing required parameters'}), 400
        
        success, message = game.harvest_plot(convert_user_id(user_id), int(plot_id))
        return jsonify({'success': success, 'message': message})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/shop', methods=['GET'])
def get_shop():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞"""
    try:
        shop_items = game.get_shop_items()
        return jsonify({'items': shop_items})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/buy', methods=['POST'])
def buy_seed():
    """–ö—É–ø–∏—Ç—å —Å–µ–º–µ—á–∫–æ"""
    try:
        data = request.get_json()
        user_id = data.get('user_id')
        seed_type = data.get('seed_type')
        
        if not all([user_id, seed_type]):
            return jsonify({'error': 'Missing required parameters'}), 400
        
        success, message = game.buy_seed(convert_user_id(user_id), seed_type)
        return jsonify({'success': success, 'message': message})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/inventory', methods=['GET'])
def get_inventory():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å"""
    try:
        user_id = request.args.get('user_id')
        if not user_id:
            return jsonify({'error': 'user_id required'}), 400
        
        inventory = game.db.get_inventory(convert_user_id(user_id))
        return jsonify({'items': inventory})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/sell', methods=['POST'])
def sell_item():
    """–ü—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç"""
    try:
        data = request.get_json()
        user_id = data.get('user_id')
        item_id = data.get('item_id')
        
        if not all([user_id, item_id]):
            return jsonify({'error': 'Missing required parameters'}), 400
        
        success, message = game.sell_item(convert_user_id(user_id), int(item_id))
        return jsonify({'success': success, 'message': message})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/stats', methods=['GET'])
def get_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞"""
    try:
        user_id = request.args.get('user_id')
        if not user_id:
            return jsonify({'error': 'user_id required'}), 400
        
        stats = game.get_player_stats(convert_user_id(user_id))
        return jsonify(stats)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/weather', methods=['GET'])
def get_weather():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ"""
    try:
        weather_info = game.get_current_weather_info()
        return jsonify(weather_info)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/player', methods=['GET'])
def get_player():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ"""
    try:
        user_id = request.args.get('user_id')
        if not user_id:
            return jsonify({'error': 'user_id required'}), 400
        
        player = game.db.get_or_create_player(convert_user_id(user_id), None)
        return jsonify(player)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

# –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ GitHub Pages
# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: https://antoged.github.io/farming-game/
# –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ
if __name__ == '__main__':
    import sys
    if len(sys.argv) > 1 and sys.argv[1] == '--test':
        print("üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –∑–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")
        app.run(debug=True, host='0.0.0.0', port=5000)
    else:
        print("‚ö†Ô∏è  –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ GitHub Pages:")
        print("üåê https://antoged.github.io/farming-game/")
        print("‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        print("üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: python webapp.py --test")

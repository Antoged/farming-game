#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –±–µ–∑ Mini App –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
"""

import os
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    welcome_text = f"""
üåæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–µ—Ä–º–µ—Ä—Å–∫—É—é –∏–≥—Ä—É, {user.first_name}!

üéÆ –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –±–µ–∑ Mini App.
üì± –î–ª—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –Ω—É–∂–µ–Ω HTTPS URL.

üîß –°—Ç–∞—Ç—É—Å: –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
"""
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üè™ –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")],
        [InlineKeyboardButton("üå§Ô∏è –ü–æ–≥–æ–¥–∞", callback_data="weather")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "stats":
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüí∞ –î–µ–Ω—å–≥–∏: 100\nüå± –£—Ä–æ–≤–µ–Ω—å: 1\nüì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: 0", reply_markup=reply_markup)
    elif query.data == "shop":
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üè™ –ú–∞–≥–∞–∑–∏–Ω:\nü•ï –ú–æ—Ä–∫–æ–≤—å: 10 –º–æ–Ω–µ—Ç\nüçÖ –ü–æ–º–∏–¥–æ—Ä: 20 –º–æ–Ω–µ—Ç\nü•î –ö–∞—Ä—Ç–æ—Ñ–µ–ª—å: 15 –º–æ–Ω–µ—Ç", reply_markup=reply_markup)
    elif query.data == "weather":
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üå§Ô∏è –ü–æ–≥–æ–¥–∞:\n‚òÄÔ∏è –Ø—Å–Ω–æ\nüìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ü–µ–Ω—ã: 1.0x", reply_markup=reply_markup)
    elif query.data == "help":
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚ùì –ü–æ–º–æ—â—å:\n/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n/shop - –ú–∞–≥–∞–∑–∏–Ω\n/weather - –ü–æ–≥–æ–¥–∞", reply_markup=reply_markup)
    elif query.data == "back_to_main":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        welcome_text = f"""
üåæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–µ—Ä–º–µ—Ä—Å–∫—É—é –∏–≥—Ä—É!

üéÆ –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –±–µ–∑ Mini App.
üì± –î–ª—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –Ω—É–∂–µ–Ω HTTPS URL.

üîß –°—Ç–∞—Ç—É—Å: –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
"""
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("üè™ –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")],
            [InlineKeyboardButton("üå§Ô∏è –ü–æ–≥–æ–¥–∞", callback_data="weather")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(welcome_text, reply_markup=reply_markup)

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüí∞ –î–µ–Ω—å–≥–∏: 100\nüå± –£—Ä–æ–≤–µ–Ω—å: 1\nüì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: 0", reply_markup=reply_markup)

async def shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üè™ –¢–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ:\nü•ï –ú–æ—Ä–∫–æ–≤—å: 10 –º–æ–Ω–µ—Ç\nüçÖ –ü–æ–º–∏–¥–æ—Ä: 20 –º–æ–Ω–µ—Ç\nü•î –ö–∞—Ä—Ç–æ—Ñ–µ–ª—å: 15 –º–æ–Ω–µ—Ç", reply_markup=reply_markup)

async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–≥–æ–¥—ã"""
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üå§Ô∏è –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞:\n‚òÄÔ∏è –Ø—Å–Ω–æ\nüìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ü–µ–Ω—ã: 1.0x", reply_markup=reply_markup)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not BOT_TOKEN:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        return
    
    print("ü§ñ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("shop", shop))
    application.add_handler(CommandHandler("weather", weather))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("üì± –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
